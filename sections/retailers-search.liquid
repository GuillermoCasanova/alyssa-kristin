{{ 'section-retailers-search.css' | asset_url | stylesheet_tag }}
<section class="retailers-search" id="retailers-search">
  <div class="retailers-search__inner page-width is-small is-full-width">
    <div id="map" class="retailers-search__map"></div>

    <div>
      <div class="retailers-search__heading">
        <h2>{{ section.settings.heading }}</h2>
      </div>
      <div class="retailers-search__body">
        {{ section.settings.body }}
      </div>
      <div class="retailers-search__form page-width">
        <form onsubmit="handleAddressSearch()" method="get">
          <div class="form-section">
            <input
              type="text"
              name="q"
              placeholder="{{ section.settings.search_placeholder }}"
              data-search-input
              class="input input--medium"
            >
          </div>
          <button
            type="submit"
            class="button button--primary button--large retailers-search__button"
            data-search-button
          >
            {{ section.settings.search_button_text }}
          </button>
          <button
            type="button"
            class=" visually-hidden buttonn button--primary  button--large retailers-search__clear"
            data-clear-input
          >
            Clear
          </button>
        </form>

        <div class="card">
          <div class="card__inner" data-filter-by>
            <div class="location-filter-header">
              <p>Filter By</p>
              <input type="checkbox" id="gowns" name="filgit pter" value="gowns" checked>
              <label for="gowns">Gowns</label>

              <input type="checkbox" id="lwd" name="filter" value="lwd">
              <label for="lwd">Little White Dress</label>
            </div>

            <h2 class="location-filter__heading">Nearest Locations</h2>
            <div data-closest-locations>Loading nearest locations...</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  let map;
  let markers = []; // Array to store markers
  let locations;
  let storedClosestLocations;

  async function initMap() {
    let userLocation = await getUserLocation(); // Get the user's location

    map = new google.maps.Map(document.getElementById('map'), {
      mapId: 'd4c46217781fbc79',
      center: { lat: 39.8283, lng: -98.5795 },
      zoom: 2,
    });

    const { AdvancedMarkerElement } = await google.maps.importLibrary('marker');
    const locationDataScript = document.getElementById('location-data').innerHTML;
    locations = JSON.parse(locationDataScript).locations;

    addMarkersFromJson(locations, AdvancedMarkerElement);

    function addMarkersFromJson(locationsArray, AdvancedMarkerElement) {
        clearMarkers();
        
        const glyphImg = document.createElement('img');
        glyphImg.src = '{{ 'location-marker.svg' | asset_url }}';

        locationsArray.forEach((location) => {
            const glyphImg = document.createElement('img');
            glyphImg.src = '{{ 'location-marker.svg' | asset_url }}';
            glyphImg.style.width = '45px'; // Set the desired width
            glyphImg.style.height = '45px'; // Set the desired height

            const marker = new AdvancedMarkerElement({
                position: new google.maps.LatLng(location.lat, location.lng),
                map: map,
                title: location.store_info.name,
                content: glyphImg
            });

            // Tooltip content for the store information
            const tooltipContent = `
            <div>
                <strong>${location.store_info.name}</strong><br>
                ${location.store_info.address}<br>
                ${location.store_info.state}, ${location.store_info.country}<br>
                ${location.store_info.phone}
            </div>
            `;

            const tooltip = new google.maps.InfoWindow({
            content: tooltipContent,
            });

            // Show tooltip on marker click
            marker.addListener('click', () => {
            // Close any open tooltips first if needed
            markers.forEach((m) => m.tooltip?.close());
            
            tooltip.open(map, marker);
            });

            // Store tooltip reference with marker to close it later
            marker.tooltip = tooltip;
            markers.push(marker);
        });

    }


    function clearMarkers() {
      markers.forEach((marker) => marker.setMap(null));
      markers = [];
    }

    // Filter locations based on the checked boxes and distance to the user
    async function onFilterChange() {
      const gownCheckbox = document.querySelector('input#gowns').checked;
      const lwdCheckbox = document.querySelector('input#lwd').checked;

      console.log(gownCheckbox, lwdCheckbox);
      
      const filteredLocations = locations.filter((location) => {
        const matchesGown = gownCheckbox ? location.store_info.gown : true;
        const matchesLwd = lwdCheckbox ? location.store_info.lwd : true;
        return matchesGown && matchesLwd;
      });

      addMarkersFromJson(filteredLocations, AdvancedMarkerElement);
    }


    function addLocationToDOM(location) {
        console.log(location);
      const locationsContainer = document.querySelector('[data-closest-locations]');
      const listItem = `<li><div class="retailers-search__location__header"><a href="${location.store_info.url}" target="_blank">${location.store_info.name}</a>  <div class='retailers-search__location__miles'>${location.miles.toFixed(2)} MILES</div></div> ${location.store_info.address} <div>${location.store_info.phone}</div></li>`;
      locationsContainer.insertAdjacentHTML('beforeend', listItem);
    }


    // Calculate the distance between two coordinates using Haversine formula
    function calculateDistance(coord1, coord2) {
      const R = 6371; // Radius of Earth in kilometers
      const dLat = (coord2.lat - coord1.lat) * (Math.PI / 180);
      const dLng = (coord2.lng - coord1.lng) * (Math.PI / 180);
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(coord1.lat * (Math.PI / 180)) *
          Math.cos(coord2.lat * (Math.PI / 180)) *
          Math.sin(dLng / 2) *
          Math.sin(dLng / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c; // Distance in kilometers
    }

    async function getClosestLocations() {
      const userLocation = await getUserLocation();

      if (!userLocation) {
        console.log('User location could not be determined.');
        return;
      }

      clearClosestLocations();

      // Calculate distances for each location
      const locationsWithDistance = locations.map((location) => ({
        ...location,
        distance: calculateDistance(userLocation, { lat: location.lat, lng: location.lng }),
        miles: calculateDistance(userLocation, { lat: location.lat, lng: location.lng }) * 0.621371, // Convert kilometers to miles
      }));

      // Sort locations by distance and take the nearest three
      const closestLocations = locationsWithDistance.sort((a, b) => a.distance - b.distance).slice(0, 3);
      storedClosestLocations = closestLocations;
      // Display closest locations in the DOM
      closestLocations.forEach(addLocationToDOM);
    }

    function getUserLocation() {
      if (navigator.geolocation) {
        return new Promise((resolve, reject) => {
          navigator.geolocation.getCurrentPosition(
            (position) =>
              resolve({
                lat: position.coords.latitude,
                lng: position.coords.longitude,
              }),
            () => resolve(null)
          );
        });
      } else {
        return Promise.resolve(null);
      }
    }

    // Add event listeners for filter changes
    document.querySelectorAll('[data-filter-by] input').forEach((input) => {
      input.addEventListener('change', onFilterChange);
    });

    async function getCoordinatesFromAddress(address) {
      const geocoder = new google.maps.Geocoder();
      return new Promise((resolve, reject) => {
        geocoder.geocode({ address: address }, (results, status) => {
          if (status === 'OK' && results[0]) {
            const location = results[0].geometry.location;
            resolve({
              lat: location.lat(),
              lng: location.lng(),
            });
          } else {
            reject('Geocode was not successful for the following reason: ' + status);
          }
        });
      });
    }

    async function handleAddressSearch(event) {
      event.preventDefault();

      const addressInput = document.querySelector('[data-search-input]').value;
      if (!addressInput) {
        return;
      }

      try {
        const coordinates = await getCoordinatesFromAddress(addressInput);
        clearClosestLocations();

        // Calculate distances for each location
        const locationsWithDistance = locations.map((location) => ({
          ...location,
          distance: calculateDistance(coordinates, { lat: location.lat, lng: location.lng }),
          miles: calculateDistance(coordinates, { lat: location.lat, lng: location.lng }) * 0.621371, // Convert kilometers to miles
        }));

        // Sort locations by distance and take the nearest three
        const closestLocations = locationsWithDistance.sort((a, b) => a.distance - b.distance).slice(0, 3);

        // Display closest locations in the DOM
        closestLocations.forEach(addLocationToDOM);

        if (closestLocations.length > 0) {
          const firstLocation = closestLocations[0];
          map.setCenter({ lat: firstLocation.lat, lng: firstLocation.lng });
          map.setZoom(12);
        }
      } catch (error) {
        console.log(error);
      }
    }

    function clearClosestLocations() {
      const locationsContainer = document.querySelector('[data-closest-locations]');
      locationsContainer.innerHTML = '';
    }

    function clearInput() {
      document.querySelector('[data-search-input]').value = '';
      clearClosestLocations();

      if (storedClosestLocations) {
        storedClosestLocations.forEach(addLocationToDOM);
      } else {
        getClosestLocations();
      }
    }

    document.querySelector('[data-search-button]').addEventListener('click', handleAddressSearch);
    document.querySelector('[data-clear-input]').addEventListener('click', clearInput);

    // Call the function on load
    getClosestLocations();
  }
</script>

<script type="text/template" id="location-data">
  {
    "locations":    [
      {% for block in section.blocks %}
        {
        "lng": {{ block.settings.latitude }},
        "lat": {{ block.settings.longitude }},
        "store_info": {
          "name": "{{ block.settings.store_name }}",
          "address": "{{ block.settings.address }}",
          "country": "{{ block.settings.country }}",
          "state": "{{ block.settings.state }}",
          "phone": "{{ block.settings.phone_number }}",
          "gown": {{ block.settings.gown }},
          "lwd": {{ block.settings.lwd }},
          "url": "{{ block.settings.website }}"
        }
      }{% if forloop.last == false %},{% endif %}
    {% endfor %}
  ]
  }
</script>

<script
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDKHxrK3dLtjFWFyldmazZOaRl9gtRwuwg&callback=initMap"
  defer
  async
></script>

{% schema %}
{
  "name": "Retailers Search",
  "enabled_on": {
    "templates": ["page"]
  },
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "id": "heading",
      "type": "text",
      "label": "Heading",
      "default": "Find a Retailer"
    },
    {
      "id": "body",
      "type": "richtext",
      "label": "Body Copy",
      "default": "<p>Use the search below to find a retailer near you.</p>"
    },
    {
      "id": "search_placeholder",
      "type": "text",
      "label": "Search Placeholder",
      "default": "Enter your city or zip code"
    },
    {
      "id": "search_button_text",
      "type": "text",
      "label": "Search Button Text",
      "default": "Search"
    }
  ],
  "blocks": [
    {
      "type": "location",
      "name": "Location",
      "settings": [
        {
          "id": "store_name",
          "type": "text",
          "label": "Store Name"
        },
        {
          "id": "website",
          "type": "url",
          "label": "Website"
        },
        {
          "id": "phone_number",
          "type": "text",
          "label": "Phone Number"
        },
        {
          "id": "address",
          "type": "richtext",
          "label": "Address"
        },
        {
          "id": "state",
          "type": "text",
          "label": "State"
        },
        {
          "id": "country",
          "type": "text",
          "label": "Country"
        },
        {
          "id": "longitude",
          "type": "number",
          "label": "Longitude"
        },
        {
          "id": "latitude",
          "type": "number",
          "label": "Latitude"
        },
        {
          "id": "gown",
          "type": "checkbox",
          "label": "Gown"
        },
        {
          "id": "lwd",
          "type": "checkbox",
          "label": "LWD"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Default",
      "category": "Search",
      "settings": {
        "heading": "Find a Retailer",
        "body": "<p>Use the search below to find a retailer near you.</p>",
        "search_placeholder": "Enter your city or zip code",
        "search_button_text": "Search"
      }
    }
  ]
}
{% endschema %}
